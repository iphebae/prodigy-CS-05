# prodigy-CS-05
A packet sniffer tool that captures and analyzes network packets in real time

from scapy.all import sniff, IP, TCP, UDP, ICMP, Raw

def packet_callback(packet):
    if packet.haslayer(IP):
        src_ip = packet[IP].src
        dst_ip = packet[IP].dst
        protocol = packet[IP].proto
        
        # Identify Protocol
        proto_name = {1: "ICMP", 6: "TCP", 17: "UDP"}.get(protocol, "Other")
        
        print(f"[+] Source: {src_ip} -> Destination: {dst_ip} | Protocol: {proto_name}")
        
        if packet.haslayer(TCP):
            print(f"    TCP | Src Port: {packet[TCP].sport} -> Dst Port: {packet[TCP].dport}")
        elif packet.haslayer(UDP):
            print(f"    UDP | Src Port: {packet[UDP].sport} -> Dst Port: {packet[UDP].dport}")
        elif packet.haslayer(ICMP):
            print("    ICMP Packet")
        
        # Print Payload if exists
        if packet.haslayer(Raw):
            print(f"    Payload: {packet[Raw].load.decode(errors='ignore')}")
        
        print("-")

# Start packet sniffing
print("Starting packet sniffer... Press Ctrl+C to stop.")
sniff(prn=packet_callback, store=False)

